# -*- coding: utf-8 -*-
"""layer_8.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1DvUdrn1rfF5GQOSFbaE24q0q1Nu-UmNf
"""

# This Python 3 environment comes with many helpful analytics libraries installed
# It is defined by the kaggle/python Docker image: https://github.com/kaggle/docker-python
# For example, here's several helpful packages to load

import numpy as np # linear algebra
import pandas as pd # data processing, CSV file I/O (e.g. pd.read_csv)

# Input data files are available in the read-only "../input/" directory
# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory

import os
for dirname, _, filenames in os.walk('/kaggle/input'):
    for filename in filenames:
        print(os.path.join(dirname, filename))

# You can write up to 20GB to the current directory (/kaggle/working/) that gets preserved as output when you create a version using "Save & Run All"
# You can also write temporary files to /kaggle/temp/, but they won't be saved outside of the current session

import pandas as pd
import tensorflow as tf
from tensorflow import keras
import matplotlib.pyplot as plt
import numpy as np
import seaborn as sn
import heapq
from sklearn.decomposition import PCA
from sklearn.svm import SVC
from sklearn.metrics import accuracy_score
from sklearn.model_selection import cross_val_score
from sklearn.model_selection import GridSearchCV
from sklearn.metrics import classification_report, confusion_matrix
from sklearn.preprocessing import RobustScaler
from imblearn.over_sampling import RandomOverSampler

train = pd.read_csv('/kaggle/input/dataset-layer8/train.csv').dropna()
valid = pd.read_csv('/kaggle/input/dataset-layer8/valid.csv').dropna()
test = pd.read_csv('/kaggle/input/dataset-layer8/test.csv')

labels = ['label_1', 'label_2', 'label_3', 'label_4']
features = ['feature_'+str(i) for i in range(1, 257)]

def getSVM(model, X, y):
    model.fit(X, y)
    return model

# Hyperparameter tuning

def hyperparameterTune(X, y)
    param_grid = {'C': [60, 70, 80, 90, 100],
                  'gamma': [1, 0.1, 0.01, 0.001, 0.0001],
                  'kernel': ['rbf']}

    grid = GridSearchCV(SVC(), param_grid, refit = True, verbose = 3)

    grid.fit(X, y)
    return grid.best_params_

def highly_correlated_features(dataset, threshold):
    corr = dataset.corr().abs()
    upper = corr.where(np.triu(np.ones(corr_matrix.shape), k=1).astype(np.bool_))
    drop = set([column for column in upper.columns if any(upper[column] > threshold)])
    return drop

"""# Label 1"""

Train, Valid, Test = train.copy(), valid.copy(), test.copy()
X_train = Train.drop(columns = labels)
y_train = Train[labels]

X_valid = Valid.drop(columns = labels)
y_valid = Valid[labels]

X_test = test.iloc[:, 1:]

plt.figure(figsize=(18, 6))
sn.countplot(data=y_train, x='label_1', color='teal')
plt.xlabel('Speaker', fontsize=12)

X_train.shape

hyperparameterTune(X_train, y_train['label_1'])

cross_val_score(SVC(kernel='rbf', C=75), X_train, y_train['label_1'], cv=3).mean()

default_model = getSVM(SVC(kernel='rbf', C=75), X_train, y_train['label_1'])
y_pred = default_model.predict(X_valid)
accuracy_score(y_valid['label_1'], y_pred)

y_pred_1 = default_model.predict(X_test)
y_pred_1.shape

"""# Label 2"""

Train, Valid, Test = train.copy(), valid.copy(), test.copy()
X_train = Train.drop(columns = labels)
y_train = Train[labels]

X_valid = Valid.drop(columns = labels)
y_valid = Valid[labels]

X_test = test.iloc[:, 1:]

plt.figure(figsize=(18, 6))
ax = sn.histplot(data=y_train, x='label_2', bins=20, kde=False)
plt.xlabel('Speaker Age')

for p in ax.patches:
    ax.annotate(str(int(p.get_height())), (p.get_x() + p.get_width() / 2., p.get_height()),
                ha='center', va='bottom', fontsize=12)

plt.show()

X_train.shape

scaler = RobustScaler()
scaler.fit(X_train)
X_train_scaled = scaler.transform(X_train)
X_valid_scaled = scaler.transform(X_valid)
X_test_scaled = scaler.transform(X_test)

pca = PCA(n_components=0.95, svd_solver = 'full')
X_train_pca = pca.fit_transform(X_train_scaled)
X_valid_pca = pca.transform(X_valid_scaled)
X_test_pca = pca.transform(X_test_scaled)
X_train_pca.shape

X_train, X_valid, X_test = X_train_pca, X_valid_pca, X_test_pca

hyperparameterTune(X_train, y_train['label_2'])

cross_val_score(SVC(kernel='rbf', C=75), X_train, y_train['label_2'], cv=3).mean()

default_model = getSVM(SVC(kernel='rbf', C=75), X_train, y_train['label_2'])
y_pred = default_model.predict(X_valid)
accuracy_score(y_valid['label_2'], y_pred)

y_pred_2 = default_model.predict(X_test)

"""# Label 3"""

Train, Valid, Test = train.copy(), valid.copy(), test.copy()
X_train = Train.drop(columns = labels)
y_train = Train[labels]

X_valid = Valid.drop(columns = labels)
y_valid = Valid[labels]

X_test = test.iloc[:, 1:]

ax = sn.countplot(x=y_train['label_3'])

for p in ax.patches:
    ax.annotate(f'{p.get_height()}', (p.get_x() + p.get_width() / 2., p.get_height()),
                ha='center', va='bottom', fontsize=9, color='black')

plt.xlabel('Speaker Gender')

X_train.shape

scaler = RobustScaler()
scaler.fit(X_train)
X_train_scaled = scaler.transform(X_train)
X_valid_scaled = scaler.transform(X_valid)
X_test_scaled = scaler.transform(X_test)

pca = PCA(n_components=0.95, svd_solver = 'full')
X_train_pca = pca.fit_transform(X_train_scaled)
X_valid_pca = pca.transform(X_valid_scaled)
X_test_pca = pca.transform(X_test_scaled)
X_train_pca.shape

X_train, X_valid, X_test = X_train_pca, X_valid_pca, X_test_pca

hyperparameterTune(X_train, y_train['label_3'])

cross_val_score(SVC(kernel='rbf', C=75), X_train, y_train['label_3'], cv=3).mean()

default_model = getSVM(SVC(kernel='rbf', C=75), X_train, y_train['label_3'])
y_pred = default_model.predict(X_valid)
accuracy_score(y_valid['label_3'], y_pred)

y_pred_3 = default_model.predict(X_test)

"""# Label 4"""

Train, Valid, Test = train.copy(), valid.copy(), test.copy()
X_train = Train.drop(columns = labels)
y_train = Train[labels]

X_valid = Valid.drop(columns = labels)
y_valid = Valid[labels]

X_test = test.iloc[:, 1:]

ax = sn.countplot(x=y_train['label_4'])

for p in ax.patches:
    ax.annotate(f'{p.get_height()}', (p.get_x() + p.get_width() / 2., p.get_height()),
                ha='center', va='bottom', fontsize=9, color='black')

plt.xlabel('Speaker Gender')

X_train.shape

ros = RandomOverSampler(random_state=0)
X_train_resampled, y_train_resampled = ros.fit_resample(X_train, y_train['label_4'])

ax = sn.countplot(x=y_train_resampled)

for p in ax.patches:
    ax.annotate(f'{p.get_height()}', (p.get_x() + p.get_width() / 2., p.get_height()),
                ha='center', va='bottom', fontsize=9, color='black')

plt.xlabel('Speaker Gender')

scaler = RobustScaler()
scaler.fit(X_train_resampled)
X_train_scaled = scaler.transform(X_train_resampled)
X_valid_scaled = scaler.transform(X_valid)
X_test_scaled = scaler.transform(X_test)

pca = PCA(n_components=0.95, svd_solver = 'full')
X_train_pca = pca.fit_transform(X_train_scaled)
X_valid_pca = pca.transform(X_valid_scaled)
X_test_pca = pca.transform(X_test_scaled)
X_train_pca.shape

X_train, X_valid, X_test = X_train_pca, X_valid_pca, X_test_pca

hyperparameterTune(X_train, y_train_resampled)

cross_val_score(SVC(kernel='rbf', C=75), X_train, y_train_resampled, cv=3).mean()

default_model = getSVM(SVC(kernel='rbf', C=75), X_train, y_train_resampled)
y_pred = default_model.predict(X_valid)
accuracy_score(y_valid['label_4'], y_pred)

y_pred_4 = default_model.predict(X_test)

"""# Save output csv"""

data = {
    'ID' : list(range(1, y_pred_1.shape[0] + 1)),
    'label_1': y_pred_1,
    'label_2': y_pred_2,
    'label_3': y_pred_3,
    'label_4': y_pred_4,
}
df = pd.DataFrame(data)
df.to_csv("/kaggle/working/output_layer8.csv", index=False)

df.shape

df.head